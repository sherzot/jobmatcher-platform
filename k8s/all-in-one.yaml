# Jobmatcher Platform - All-in-One Kubernetes Deployment
# This file contains all the necessary configurations for a complete deployment

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: jobmatcher
  labels:
    name: jobmatcher
    app: jobmatcher-platform

---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: jobmatcher-config
  namespace: jobmatcher
data:
  # Database configuration
  DB_HOST: "mysql-service"
  DB_PORT: "3306"
  DB_NAME: "jobmatcher"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # MinIO configuration
  MINIO_ENDPOINT: "minio-service:9000"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadmin"
  
  # Service ports
  AUTH_SERVICE_PORT: "8080"
  ADMIN_SERVICE_PORT: "8081"
  AGENT_SERVICE_PORT: "8082"
  COMPANY_SERVICE_PORT: "8083"
  JOB_SERVICE_PORT: "8084"
  OFFER_SERVICE_PORT: "8085"
  RESUME_SERVICE_PORT: "8086"
  PARSER_SERVICE_PORT: "8087"
  PDF_WORKER_PORT: "8088"

---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: jobmatcher-secrets
  namespace: jobmatcher
type: Opaque
stringData:
  DB_USERNAME: "jobmatcher"
  DB_PASSWORD: "password123"
  JWT_SECRET: "jsecretkey"
  REDIS_PASSWORD: ""

---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: jobmatcher
  labels:
    app: mysql
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
      tier: database
  template:
    metadata:
      labels:
        app: mysql
        tier: database
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: DB_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: DB_NAME
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: DB_USERNAME
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-init
        configMap:
          name: mysql-init-config

---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: jobmatcher
  labels:
    app: mysql
    tier: database
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
    tier: database
  type: ClusterIP

---
# MySQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: jobmatcher
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# MySQL Init ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-config
  namespace: jobmatcher
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS jobmatcher;
    USE jobmatcher;
    
    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        staff_code VARCHAR(10) PRIMARY KEY,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(20),
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    
    -- Companies table
    CREATE TABLE IF NOT EXISTS companies (
        company_code VARCHAR(10) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        address TEXT,
        phone VARCHAR(20),
        email VARCHAR(255),
        website VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    
    -- Agents table
    CREATE TABLE IF NOT EXISTS agents (
        agent_code VARCHAR(10) PRIMARY KEY,
        company_code VARCHAR(10),
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(20),
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (company_code) REFERENCES companies(company_code)
    );
    
    -- Job orders table
    CREATE TABLE IF NOT EXISTS job_orders (
        order_code VARCHAR(10) PRIMARY KEY,
        company_code VARCHAR(10),
        title VARCHAR(255) NOT NULL,
        description TEXT,
        requirements TEXT,
        salary_min DECIMAL(10,2),
        salary_max DECIMAL(10,2),
        location VARCHAR(255),
        status ENUM('open', 'closed', 'in_progress') DEFAULT 'open',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (company_code) REFERENCES companies(company_code)
    );
    
    -- Admins table
    CREATE TABLE IF NOT EXISTS admins (
        admin_id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(100) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role ENUM('super_admin', 'admin', 'moderator') DEFAULT 'admin',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: jobmatcher
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      tier: cache
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-persistent-storage
          mountPath: /data
      volumes:
      - name: redis-persistent-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: jobmatcher
  labels:
    app: redis
    tier: cache
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    tier: cache
  type: ClusterIP

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: jobmatcher
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# MinIO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
  namespace: jobmatcher
  labels:
    app: minio
    tier: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
      tier: storage
  template:
    metadata:
      labels:
        app: minio
        tier: storage
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        ports:
        - containerPort: 9000
        - containerPort: 9001
        command:
        - /usr/bin/docker-entrypoint.sh
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: MINIO_SECRET_KEY
        volumeMounts:
        - name: minio-persistent-storage
          mountPath: /data
      volumes:
      - name: minio-persistent-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: jobmatcher
  labels:
    app: minio
    tier: storage
spec:
  ports:
  - name: api
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  selector:
    app: minio
    tier: storage
  type: ClusterIP

---
# MinIO PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: jobmatcher
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# Auth Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-deployment
  namespace: jobmatcher
  labels:
    app: auth-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
      tier: backend
  template:
    metadata:
      labels:
        app: auth-service
        tier: backend
    spec:
      containers:
      - name: auth-service
        image: sherdev/jobmatcher:auth-service-latest
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: DB_NAME
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: DB_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: JWT_SECRET
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: jobmatcher-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jobmatcher-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Auth Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: jobmatcher
  labels:
    app: auth-service
    tier: backend
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: auth-service
    tier: backend
  type: ClusterIP

---
# Web Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-frontend-deployment
  namespace: jobmatcher
  labels:
    app: web-frontend
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-frontend
      tier: frontend
  template:
    metadata:
      labels:
        app: web-frontend
        tier: frontend
    spec:
      containers:
      - name: web-frontend
        image: sherdev/jobmatcher:web-frontend-latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Web Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: web-frontend-service
  namespace: jobmatcher
  labels:
    app: web-frontend
    tier: frontend
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: web-frontend
    tier: frontend
  type: ClusterIP

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jobmatcher-ingress
  namespace: jobmatcher
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  ingressClassName: nginx
  rules:
  - host: jobmatcher.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-frontend-service
            port:
              number: 80
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 8080
